Git 공부

버전관리
- 의미있는 변화들 (기능의개선 또는 버그의 수정)

버전관리 시스템
- 변화의 관리

위키피디아
- 집단지성의 예로써 모두가 함께 만드는 오픈 사전
- 깃의 대표적인 사례

드롭박스
- 깃의 대표적인 사례2

1. 저장소 만들기 (init)

2. 버전 만들기(commit)
- Uncommiteed changes
- 원하는 버전에 추가한 기능만 staging으로 올려서 커밋한다.
- unstaged files는 수정된 파일들이 나타나는 곳
- staged files 하나의 버전에 포함될 내용을 나타내는 곳
  (변경된 모든 파일을 하나의 버전으로 두지 않아도 된다.)
- unstaged == working copy
- staged files == index, staging area
- working directory > staging area > repository

3. 되돌리기
- Discard : 어떤 파일을 수정했는데, 커밋전일 경우, 가장 마지막 커밋된 상태로 되돌릴수있다.
  (작업하기 전 상태로 돌림)
- Reset : 이미 커밋한 내용을 취소하는 방법, 이전 커밋상태로 되돌리는 방법
    Reset master to this commit
    1) soft
    2) mixed
    - 현재 working copy는 그대로 두고, 깃만 이전으로 되돌리고 싶은경우.
    (깃 버전관리 시 유용)
    3) hard
    - working copy(현재 작업중인 상태)까지 이전으로 되돌리는 경우 사용.

- Revert(Reverse commit) : 버전상태는 그대로 남겨두고 이전 커밋(버전)상태로 돌아가고 싶은 경우 사용.
  (이전으로 돌리고 싶을경우, 바로 이전버전부터 단계적으로 Revert시켜야 합니다. 여러개의 버전을 건너뛰고 revert하면 에러 발생)

4. 브렌치
언제 사용할까?
- 동작을 하지만 상품성이 아직 없는 경우
- 경영자의 변동으로 인해서 불확실성한 기능을 추가한 경우
- 퍼포먼스가 아직 안정적인 수준이 아닌 경우.
 >> 두개의 디렉터리를 복사해놓고 사용하듯 작업할 수 있다.

<브렌치 만들기>
- branch를 누르고 create branch 실시
- 브랜치에 따라서 코드가 달라진다.
- 브랜치는 결국 별도의 디렉터리로 관리하듯이 2개를 관리할 수 있다.

<브랜치 합치기>
- 브랜치들을 합칠때 사용한다.
1) 브랜치 받을 곳으로 체크아웃한다.
(master 브랜치와 ldy브랜치가 있을때, master로 합치길 원한다면, master브랜치에 checkout)
2) 합칠 브렌치 ldy브렌치를 우클릭하고 merge ldy into master 클릭.

<브랜치간의 충돌 해결>
- 두개의 브랜치가 동일한 파일의 같은 부분을 수정했을 경우 충돌이 발생한다.
- conflict를 내고, 사용자가 처리할 수 있도록 코드에 나타냄.
- <<<<<<<< HEAD : 현재 내가 선택한 브렌치
- >>>>>>>> 실험2 : 머지할 브랜치
- 파일을 수정하고, Resolve Conflicts 를 사용하여 해결한다.

<브랜치 충돌의 예방>
- 브랜치 충돌을 예방합니다.
-ㅁㄴㅇㄹㅁㄴㅇㄹㅁㅇㄴ
