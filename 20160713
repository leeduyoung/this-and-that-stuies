[ 로그인 기능 > 세션처리 ]

목적
    - 웹/앱 개발하는 모든 플랫폼에서 공통으로 사용하는 세션처리 로직을 구현하고자 함.

요구사항
    1) 데이터베이스에 세션테이블을 생성하고, 유저별로 세션테이블을 관리한다.
    2) 동시접속은 불가능하도록 한다. (가능하게 한다면, 데이터베이스에 세션테이블을 관리할 필요가 없음. 메모리에 관리하는게 편함)
    3) 브라우저 별로 다른 세션id를 갖기 때문에, 별도의 로그인이 필요하다.

추가 개발 사항
    1) 세션검사 메소드를 구현한다.
        - 요청이 들어온 session_id값과 일치하는 session_id가 db에 있는지 검사한다.
    2) 모든 rest api에 HttpSession parameter를 추가한다.
    3) 최초에 login시 session_id를 세션 테이블에 저장한다.
    4) 이후 모든 기능에서는, db에서 데이터 요청 전에 유효한 세션인지 검사하는 메소드가 추가된다.
        > 변경 : 최초에 get방식으로 세션을 검사하는 rest api를 하나 만들고, 로그인 전에 불리도록 추가한다.
    5) 세션이 끊어졌을경우, redirect할 페이지로 이동한다.
        - redirect 페이지 필요. 

유스케이스
    1) 앱이나 웹에 유저가 접속한다.
    2) 세션검사를 실시한다.
        2-1) 유효한 세션일 경우
            2-1-1) 로그인 된 화면(페이지)로 이동한다.
        2-2) 유효하지 않은 세션일 경우
            2-2-1) 유저가 login을 실시한다.
            2-2-2) session_id가 세션테이블에 저장되고, 로그인 된 화면으로 이동한다.     
    3) 이후 db와 통신이 필요한 모든 케이스의 경우, 세션이 유효한지 검사하고 유효하다면 화면 이동이 된다.
    4) 세션이 유효하지 않을 경우, 특정 화면 또는 로그인 화면으로 redirect 된다. 

* 개인정보에 해당하는 즉, memberId로 통신하는 모든 정보에 대해서는 session_id를 사용한다.

Sample Code
	@RequestMapping(value="/session/status", method=RequestMethod.GET)
	public String sessionStatus(HttpSession httpSession)
	{
		if(httpSession.getAttribute("success") != null)
		{
			boolean session = (boolean) httpSession.getAttribute("success");
			if(session)
			{
				// 세션이 유효한 경우
				return "logined";
			}
		}
		
		//세션이 유효하지 않은 경우
		System.out.println(httpSession.getAttribute("success"));
		
		System.out.println(httpSession.getId());
		httpSession.setAttribute("success", true);
		
		//httpSession.invalidate(); //로그아웃시 사용
		return "hello world";
	}
